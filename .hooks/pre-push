#!/bin/sh

# set -x

# Clean current folder
rm -rf .hook-checkout/checkout
mkdir .hook-checkout/checkout

# Clone the latest code base to the folder and apply the staged changes
git archive --format tar HEAD | tar x -C .hook-checkout/checkout

# Link the imported dependencies to the checkout folder (for fast working)
ln -sr node_modules .hook-checkout/checkout
ln -sr vendor .hook-checkout/checkout

cd .hook-checkout/checkout

# Run the PHP linter
if [ -e 'vendor/bin/php-cs-fixer' ]
then
	composer cs:check || { echo "The PHP code is not validly formatted."; (( retVal |= 1 )); }
else
	echo "WARNING: The PHP check could not be carried out!"
fi

if [ -e 'vendor/bin/psalm.phar' ]; then
	composer psalm || { echo "The PHP code has type issues. Check psalm."; (( retVal |= 16 )); }
else
	echo "WARNING: The PSALM code checker could not be carried out!"
fi

# Run the JS linter
if [ -e 'node_modules/.bin/eslint' ]
then
	npm run --silent eslint || { echo 'The javascript code seems to be not satifying the eslint linter.'; (( retVal |= 2 )); }
else
	echo "WARNING: The JS/Vue check could not be carried out!"
fi

if [ -e 'node_modules/.bin/prettier' ]; then
	npm run prettier || { echo 'The javascript code seems to be not satifying the prettier code styler.'; (( retVal |= 4 )); }
else
	echo "WARNING: The Prettier check could not be carried out!"
fi

if [ -e 'node_modules/.bin/stylelint' ]; then
	npm run stylelint || { echo 'The CSS code seems to be not satifying the stylelint linter.'; (( retVal |= 8 )); }
else
	echo "WARNING: The Stylelint check could not be carried out!"
fi

cd ../..
rm -r .hook-checkout/checkout

exit $retVal
